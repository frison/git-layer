#!/usr/bin/env bash
#
# Version: 0.0.1
#
# This script is used to pull a git repository and copy the files to a relative path
# in the current directory. It is useful for pulling in a git repository as a layer
# on top of an existing directory.
#
# The script will remove any files that are listed in the .gitignore.layer file in the
# root of the repository you are pulling in.
#
# Usage: git-layer <git-url> <relative-path>
# Example: git-layer git@github.com:frison/_git-layer.git .
#
set -euxo pipefail

function usage() {
    echo "Usage: $0 <git-url> <relative-path>"
    echo "Example: git-layer git@github.com:frison/_git-layer.git ."
}

export SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# Temp directory pattern inspired by https://stackoverflow.com/questions/4632028/how-to-create-a-temporary-directory
export WORK_DIR=`mktemp -d`

function log_info() {
    echo "[git-layer] INFO: $@"
}

function log_error() {
    >&2 echo "[git-layer] ERROR: $@"
}

function fatal() {
    >&2 echo "[git-layer] FATAL: $@"
    exit 1
}

# check if tmp dir was created
if [[ ! "$WORK_DIR" || ! -d "$WORK_DIR" ]]; then
  fatal "Could not create temp dir"
fi

# deletes the temp directory
function cleanup {
  local workdir=$1

  (rm -rf "$workdir") || {
    log_error "Could not remove temp dir $workdir -- manual cleanup required"
  }
  log_info "Deleted temp working directory $workdir"
}

# This captures the workdir in the closure so that even if the WORK_DIR is changed
# the cleanup function will still be able to delete the correct directory
trap "cleanup $WORK_DIR" EXIT

function process_gitignore_layer() {
    # This removes everything from the directory that is in the .gitlayer.ignore file
    while IFS= read -r line || [ -n "$line" ]; do
        # Remove comments from the line (if any)
        line=$(echo "$line" | sed 's/#.*//')

        # Trim leading and trailing whitespace
        line=$(echo "$line" | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')

        # Skip empty lines
        if [ -z "$line" ]; then
            continue
        fi

        # Use find to locate all files that match the pattern
        find . -name "$line" -type f -delete
    done < ".gitignore.layer"

    rm .gitignore.layer
}

export GIT_URL=$1
export RELATIVE_PATH=$2

cd $WORK_DIR

# Shallow clone the directory, then remove the .git directory so it's just a bunch of files
git clone --depth 1 $GIT_URL .
rm -rf .git

if [ -f ".gitignore.layer" ]; then
    process_gitignore_layer
fi

# Copy the files to the relative path
cp -r . ${SCRIPT_DIR}/${RELATIVE_PATH}
