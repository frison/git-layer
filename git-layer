#!/bin/sh
#
# Version: 0.0.2
#
# This script is used to pull a git repository and copy the files to a relative path
# in the current directory. It is useful for pulling in a git repository as a layer
# on top of an existing directory.
#
# The script will remove any files that are listed in the .gitlayer.ignore file in the
# root of the repository you are pulling in.
#
# Usage: git-layer <git-url> <relative-path>
# Example: git-layer git@github.com:frison/_git-layer.git .
#

OPTS_SPEC="\
git-layer <repository> <path>
git-layer --apply
--
h,help        show the help
apply         discover and update any gitlayers (.gitlayer)
"

usage () {
  set_args="$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "-h" || echo exit $?)"
  eval "$set_args"
}

die () {
    >&2 echo "[git-layer] $@"
    exit 1
}

log_info () {
    echo "[git-layer] INFO: $@"
}

log_error () {
    >&2 echo "[git-layer] ERROR: $@"
}

use_temp () {
  # Temp directory pattern inspired by https://stackoverflow.com/questions/4632028/how-to-create-a-temporary-directory
  export WORK_DIR=$( mktemp -d )

  # check if tmp dir was created
  if ! test -d $WORK_DIR ; then
    die "Could not create temp dir"
  fi
  
  # This captures the workdir in the closure so that even if the WORK_DIR is changed
  # the cleanup function will still be able to delete the correct directory
  trap "cleanup $WORK_DIR" EXIT
}

# deletes the temp directory
cleanup () {
  local workdir=$1

  (rm -rf "$workdir") || {
    log_error "Could not remove temp dir $workdir -- manual cleanup required"
  }
  log_info "Deleted temp working directory $workdir"
}

process_gitlayer_ignore () {
    # This removes everything from the directory that is in the .gitlayer.ignore file
    while IFS= read -r line || [ -n "$line" ]; do
        # Remove comments from the line (if any)
        line=$(echo "$line" | sed 's/#.*//')

        # Trim leading and trailing whitespace
        line=$(echo "$line" | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')

        # Skip empty lines
        if [ -z "$line" ]; then
            continue
        fi

        if test -d "$line"; then
          rm -rf $line
        else
          # Use find to locate all files that match the pattern
          find . -name "$line" -type f -delete
        fi
    done < ".gitlayer.ignore"

    rm .gitlayer.ignore
}

apply_recursive () {
  for dir in $(find . -name '.gitlayer' -exec dirname {} \;)
  do
    # cd into directory and run git-layer script with each line of .gitlayer as arguments
    (cd "$dir" && xargs git-layer < .gitlayer)
  done
}

apply_layer () {
  current_dir=$( pwd )
  git_url=$1
  relative_path=$2

  if [ -z "$git_url" ]; then
    usage
    die "Missing git url"
  fi

  if [ -z "$relative_path" ]; then
    usage
    die "Missing relative path"
  fi

  if [ ! -d "${current_dir}/${relative_path}" ]; then
    die "Relative path (${current_dir}/${relative_path} does not exist"
  fi

  use_temp || exit $?
  cd $WORK_DIR || exit $?
  # Shallow clone the directory, then remove the .git directory so it's just a bunch of files
  git clone --depth 1 $git_url .
  echo ".git\n" >> .gitlayer.ignore
  process_gitlayer_ignore

  # Copy the files to the relative path
  cp -r . ${current_dir}/${relative_path}

  # We'll allow the traps to cleanup the temporary directory
  cd $current_dir
}

main () {
  # No params provided? Then you really need help...
  if test $# -eq 0; then
    set -- -h
  fi

  set_args="$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"
  eval "$set_args"

  arg_apply=
  while test $# -gt 0; do
    opt="$1"
    shift
    case "$opt" in
      --apply)
        arg_apply=1
        ;;
      --help|-h)
        usage
        ;;
      --)
        break
        ;;
      *)
        die "fatal: unexpected option: $opt"
    esac
  done

  if test -n "$arg_apply" && test $# -eq 0; then
    apply_recursive
  else
    apply_layer "$@"
  fi
}

main "$@"